<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/docs/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/index.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;MS Thesis Progress Tracker - Geospatial Tagging &lt;/title&gt;&#10;&#10;    &lt;!-- Favicon --&gt;&#10;    &lt;link rel=&quot;icon&quot; href=&quot;data:image/svg+xml,&lt;svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'&gt;&lt;text y='.9em' font-size='90'&gt;&lt;/text&gt;&lt;/svg&gt;&quot;&gt;&#10;&#10;    &lt;!-- External Libraries --&gt;&#10;    &lt;script src=&quot;https://unpkg.com/react@18/umd/react.production.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;https://unpkg.com/react-dom@18/umd/react-dom.production.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;https://unpkg.com/@babel/standalone/babel.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js&quot;&gt;&lt;/script&gt;&#10;&#10;    &lt;!-- Tailwind CSS --&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        tailwind.config = {&#10;            theme: {&#10;                extend: {&#10;                    colors: {&#10;                        'sunset-orange': '#F28C38',&#10;                        'sunset-light': '#F5A962',&#10;                        'sunset-dark': '#E67E22'&#10;                    },&#10;                    animation: {&#10;                        'fade-in': 'fadeIn 0.5s ease-in-out',&#10;                        'slide-up': 'slideUp 0.6s ease-out',&#10;                        'bounce-gentle': 'bounceGentle 2s infinite',&#10;                        'pulse-orange': 'pulseOrange 2s infinite'&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    &lt;/script&gt;&#10;&#10;    &lt;style&gt;&#10;        @keyframes fadeIn {&#10;            from { opacity: 0; }&#10;            to { opacity: 1; }&#10;        }&#10;&#10;        @keyframes slideUp {&#10;            from { transform: translateY(20px); opacity: 0; }&#10;            to { transform: translateY(0); opacity: 1; }&#10;        }&#10;&#10;        @keyframes bounceGentle {&#10;            0%, 20%, 50%, 80%, 100% { transform: translateY(0); }&#10;            40% { transform: translateY(-10px); }&#10;            60% { transform: translateY(-5px); }&#10;        }&#10;&#10;        @keyframes pulseOrange {&#10;            0%, 100% { box-shadow: 0 0 0 0 rgba(242, 140, 56, 0.7); }&#10;            70% { box-shadow: 0 0 0 10px rgba(242, 140, 56, 0); }&#10;        }&#10;&#10;        .glass-effect {&#10;            backdrop-filter: blur(10px);&#10;            background: rgba(255, 255, 255, 0.9);&#10;        }&#10;&#10;        .hover-lift {&#10;            transition: transform 0.3s ease, box-shadow 0.3s ease;&#10;        }&#10;&#10;        .hover-lift:hover {&#10;            transform: translateY(-5px);&#10;            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);&#10;        }&#10;&#10;        .progress-bar {&#10;            background: linear-gradient(90deg, #F28C38 0%, #F5A962 100%);&#10;        }&#10;&#10;        .robot-animation {&#10;            animation: bounceGentle 2s infinite;&#10;        }&#10;&#10;        .tooltip {&#10;            position: relative;&#10;        }&#10;&#10;        .tooltip:hover::after {&#10;            content: attr(data-tooltip);&#10;            position: absolute;&#10;            bottom: 100%;&#10;            left: 50%;&#10;            transform: translateX(-50%);&#10;            background: #333;&#10;            color: white;&#10;            padding: 5px 10px;&#10;            border-radius: 4px;&#10;            font-size: 12px;&#10;            white-space: nowrap;&#10;            z-index: 1000;&#10;        }&#10;&#10;        .activity-cell {&#10;            transition: all 0.2s ease;&#10;        }&#10;&#10;        .activity-cell:hover {&#10;            transform: scale(1.1);&#10;            z-index: 10;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;bg-white min-h-screen&quot;&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;&#10;    &lt;script type=&quot;text/babel&quot;&gt;&#10;        const { useState, useEffect, useRef } = React;&#10;&#10;        // Configuration - UPDATE THESE WITH YOUR ACTUAL ENDPOINTS&#10;        const CONFIG = {&#10;            GITHUB_REPO: 'phaze7r/geospatial-tagging-thesis',&#10;            BACKEND_API: 'https://your-heroku-backend.herokuapp.com/api', // UPDATE THIS&#10;            MONGODB_URI: 'mongodb+srv://phaze7r:UBlzckErSAKPnwID@osm-cluster.scxgk9j.mongodb.net/?retryWrites=true&amp;w=majority&amp;appName=osm-cluster'&#10;        };&#10;&#10;        // Motivational quotes&#10;        const MOTIVATIONAL_QUOTES = [&#10;            &quot;Keep exploring the geospatial frontier! &quot;,&#10;            &quot;Every commit brings you closer to success! &quot;,&#10;            &quot;Data is the new oil, and you're the refiner! ⛽&quot;,&#10;            &quot;Mapping the world, one tag at a time! ️&quot;,&#10;            &quot;Your research will change how we see places! ️&quot;,&#10;            &quot;Geospatial intelligence is the future! &quot;,&#10;            &quot;Every dataset tells a story! &quot;,&#10;            &quot;Innovation happens at the intersection of data and geography! &quot;&#10;        ];&#10;&#10;        // Multilingual greetings&#10;        const GREETINGS = {&#10;            en: &quot;Welcome to my thesis journey! &quot;,&#10;            ur: &quot;میری تھیسس کے سفر میں خوش آمدید! &quot;,&#10;            ps: &quot;زموږ د تیسس سفر ته ښه راغلاست! &quot;,&#10;            es: &quot;¡Bienvenido a mi viaje de tesis! &quot;&#10;        };&#10;&#10;        // API functions - REPLACE WITH ACTUAL API CALLS&#10;        const api = {&#10;            // Authentication&#10;            login: async (username, password) =&gt; {&#10;                try {&#10;                    const response = await fetch(`${CONFIG.BACKEND_API}/auth/login`, {&#10;                        method: 'POST',&#10;                        headers: { 'Content-Type': 'application/json' },&#10;                        body: JSON.stringify({ username, password })&#10;                    });&#10;                    return await response.json();&#10;                } catch (error) {&#10;                    console.error('Login error:', error);&#10;                    // Fallback for demo&#10;                    if (username === 'admin' &amp;&amp; password === 'admin123') {&#10;                        return { success: true, user: { username, role: 'admin' } };&#10;                    } else if (username === 'supervisor' &amp;&amp; password === 'super123') {&#10;                        return { success: true, user: { username, role: 'editor' } };&#10;                    }&#10;                    return { success: false, message: 'Invalid credentials' };&#10;                }&#10;            },&#10;&#10;            // Progress&#10;            getProgress: async () =&gt; {&#10;                try {&#10;                    const response = await fetch(`${CONFIG.BACKEND_API}/progress`);&#10;                    return await response.json();&#10;                } catch (error) {&#10;                    console.error('Progress fetch error:', error);&#10;                    return { progress: 23 }; // Fallback&#10;                }&#10;            },&#10;&#10;            updateProgress: async (progress) =&gt; {&#10;                try {&#10;                    const response = await fetch(`${CONFIG.BACKEND_API}/progress`, {&#10;                        method: 'POST',&#10;                        headers: { 'Content-Type': 'application/json' },&#10;                        body: JSON.stringify({ progress })&#10;                    });&#10;                    return await response.json();&#10;                } catch (error) {&#10;                    console.error('Progress update error:', error);&#10;                    return { success: true }; // Fallback&#10;                }&#10;            },&#10;&#10;            // Notes&#10;            getNotes: async () =&gt; {&#10;                try {&#10;                    const response = await fetch(`${CONFIG.BACKEND_API}/notes`);&#10;                    return await response.json();&#10;                } catch (error) {&#10;                    console.error('Notes fetch error:', error);&#10;                    return [&#10;                        { id: 1, date: '2024-06-15', content: 'Started data collection phase', author: 'admin', createdAt: '2024-01-15T10:00:00Z' },&#10;                        { id: 2, date: '2024-05-20', content: 'Completed literature review', author: 'admin', createdAt: '2024-01-20T14:30:00Z' }&#10;                    ]; // Fallback&#10;                }&#10;            },&#10;&#10;            addNote: async (note) =&gt; {&#10;                try {&#10;                    const response = await fetch(`${CONFIG.BACKEND_API}/notes`, {&#10;                        method: 'POST',&#10;                        headers: { 'Content-Type': 'application/json' },&#10;                        body: JSON.stringify(note)&#10;                    });&#10;                    return await response.json();&#10;                } catch (error) {&#10;                    console.error('Add note error:', error);&#10;                    return { success: true, id: Date.now() }; // Fallback&#10;                }&#10;            },&#10;&#10;            // GitHub API&#10;            getCommits: async () =&gt; {&#10;                try {&#10;                    const response = await fetch(`https://api.github.com/repos/${CONFIG.GITHUB_REPO}/commits?per_page=50`);&#10;                    return await response.json();&#10;                } catch (error) {&#10;                    console.error('Error fetching commits:', error);&#10;                    return [];&#10;                }&#10;            },&#10;&#10;            getRepoTree: async () =&gt; {&#10;                try {&#10;                    const response = await fetch(`https://api.github.com/repos/${CONFIG.GITHUB_REPO}/git/trees/main?recursive=1`);&#10;                    return await response.json();&#10;                } catch (error) {&#10;                    console.error('Error fetching repo tree:', error);&#10;                    return { tree: [] };&#10;                }&#10;            },&#10;&#10;            getFileContent: async (path) =&gt; {&#10;                try {&#10;                    const response = await fetch(`https://api.github.com/repos/${CONFIG.GITHUB_REPO}/contents/${path}`);&#10;                    const data = await response.json();&#10;                    return atob(data.content);&#10;                } catch (error) {&#10;                    console.error('Error fetching file content:', error);&#10;                    return '';&#10;                }&#10;            }&#10;        };&#10;&#10;        // Utility functions&#10;        const getDateString = (date) =&gt; {&#10;            return date.toISOString().split('T')[0];&#10;        };&#10;&#10;        const getDayName = (date) =&gt; {&#10;            return date.toLocaleDateString('en-US', { weekday: 'short' });&#10;        };&#10;&#10;        const getLast7Days = () =&gt; {&#10;            const days = [];&#10;            for (let i = 6; i &gt;= 0; i--) {&#10;                const date = new Date();&#10;                date.setDate(date.getDate() - i);&#10;                days.push(date);&#10;            }&#10;            return days;&#10;        };&#10;&#10;        // Components&#10;        const LoadingSpinner = () =&gt; (&#10;            &lt;div className=&quot;flex justify-center items-center p-4&quot;&gt;&#10;                &lt;div className=&quot;animate-spin rounded-full h-8 w-8 border-b-2 border-sunset-orange&quot;&gt;&lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;&#10;        const RobotGreeting = () =&gt; {&#10;            const [currentLang, setCurrentLang] = useState('en');&#10;            const [currentQuote, setCurrentQuote] = useState('');&#10;&#10;            useEffect(() =&gt; {&#10;                // Cycle through languages&#10;                const langInterval = setInterval(() =&gt; {&#10;                    const langs = Object.keys(GREETINGS);&#10;                    const currentIndex = langs.indexOf(currentLang);&#10;                    const nextIndex = (currentIndex + 1) % langs.length;&#10;                    setCurrentLang(langs[nextIndex]);&#10;                }, 3000);&#10;&#10;                // Random quote&#10;                setCurrentQuote(MOTIVATIONAL_QUOTES[Math.floor(Math.random() * MOTIVATIONAL_QUOTES.length)]);&#10;&#10;                return () =&gt; clearInterval(langInterval);&#10;            }, [currentLang]);&#10;&#10;            return (&#10;                &lt;div className=&quot;text-center mb-8 animate-fade-in&quot;&gt;&#10;                    &lt;div className=&quot;robot-animation text-6xl mb-4&quot;&gt;&lt;/div&gt;&#10;                    &lt;h2 className=&quot;text-2xl font-bold text-gray-800 mb-2&quot;&gt;&#10;                        {GREETINGS[currentLang]}&#10;                    &lt;/h2&gt;&#10;                    &lt;p className=&quot;text-sunset-orange font-medium&quot;&gt;{currentQuote}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            );&#10;        };&#10;&#10;        // NEW: GitHub Activity Chart Component&#10;        const GitHubActivityChart = ({ commits }) =&gt; {&#10;            const [activityData, setActivityData] = useState({});&#10;            const [hoveredDay, setHoveredDay] = useState(null);&#10;&#10;            useEffect(() =&gt; {&#10;                if (commits.length &gt; 0) {&#10;                    const last7Days = getLast7Days();&#10;                    const activity = {};&#10;&#10;                    // Initialize all days with 0 commits&#10;                    last7Days.forEach(date =&gt; {&#10;                        activity[getDateString(date)] = {&#10;                            count: 0,&#10;                            commits: [],&#10;                            date: date&#10;                        };&#10;                    });&#10;&#10;                    // Count commits for each day&#10;                    commits.forEach(commit =&gt; {&#10;                        const commitDate = getDateString(new Date(commit.commit.author.date));&#10;                        if (activity[commitDate]) {&#10;                            activity[commitDate].count++;&#10;                            activity[commitDate].commits.push(commit);&#10;                        }&#10;                    });&#10;&#10;                    setActivityData(activity);&#10;                }&#10;            }, [commits]);&#10;&#10;            const getIntensityColor = (count) =&gt; {&#10;                if (count === 0) return 'bg-gray-100';&#10;                if (count &lt;= 2) return 'bg-sunset-orange bg-opacity-30';&#10;                if (count &lt;= 4) return 'bg-sunset-orange bg-opacity-60';&#10;                return 'bg-sunset-orange';&#10;            };&#10;&#10;            const last7Days = getLast7Days();&#10;&#10;            return (&#10;                &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6 hover-lift&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-bold text-gray-800 mb-4 flex items-center&quot;&gt;&#10;                         Weekly Activity&#10;                    &lt;/h3&gt;&#10;&#10;                    &lt;div className=&quot;flex justify-between items-center mb-4&quot;&gt;&#10;                        {last7Days.map((date, index) =&gt; {&#10;                            const dateStr = getDateString(date);&#10;                            const dayData = activityData[dateStr] || { count: 0, commits: [] };&#10;&#10;                            return (&#10;                                &lt;div key={dateStr} className=&quot;flex flex-col items-center&quot;&gt;&#10;                                    &lt;div className=&quot;text-xs text-gray-600 mb-2 font-medium&quot;&gt;&#10;                                        {getDayName(date)}&#10;                                    &lt;/div&gt;&#10;                                    &lt;div&#10;                                        className={`w-8 h-8 rounded-lg activity-cell cursor-pointer tooltip ${getIntensityColor(dayData.count)} border border-gray-200`}&#10;                                        data-tooltip={`${dayData.count} commits on ${date.toLocaleDateString()}`}&#10;                                        onMouseEnter={() =&gt; setHoveredDay(dateStr)}&#10;                                        onMouseLeave={() =&gt; setHoveredDay(null)}&#10;                                    &gt;&#10;                                        &lt;div className=&quot;w-full h-full flex items-center justify-center text-xs font-bold text-gray-700&quot;&gt;&#10;                                            {dayData.count &gt; 0 ? dayData.count : ''}&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;text-xs text-gray-500 mt-1&quot;&gt;&#10;                                        {date.getDate()}&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            );&#10;                        })}&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Hover details */}&#10;                    {hoveredDay &amp;&amp; activityData[hoveredDay] &amp;&amp; (&#10;                        &lt;div className=&quot;mt-4 p-3 bg-gray-50 rounded-lg animate-fade-in&quot;&gt;&#10;                            &lt;h4 className=&quot;font-semibold text-gray-800 mb-2&quot;&gt;&#10;                                {activityData[hoveredDay].date.toLocaleDateString('en-US', {&#10;                                    weekday: 'long',&#10;                                    year: 'numeric',&#10;                                    month: 'long',&#10;                                    day: 'numeric'&#10;                                })}&#10;                            &lt;/h4&gt;&#10;                            {activityData[hoveredDay].commits.length &gt; 0 ? (&#10;                                &lt;div className=&quot;space-y-1&quot;&gt;&#10;                                    {activityData[hoveredDay].commits.slice(0, 3).map(commit =&gt; (&#10;                                        &lt;div key={commit.sha} className=&quot;text-sm text-gray-600&quot;&gt;&#10;                                            • {commit.commit.message.split('\n')[0]}&#10;                                        &lt;/div&gt;&#10;                                    ))}&#10;                                    {activityData[hoveredDay].commits.length &gt; 3 &amp;&amp; (&#10;                                        &lt;div className=&quot;text-xs text-gray-500&quot;&gt;&#10;                                            +{activityData[hoveredDay].commits.length - 3} more commits&#10;                                        &lt;/div&gt;&#10;                                    )}&#10;                                &lt;/div&gt;&#10;                            ) : (&#10;                                &lt;div className=&quot;text-sm text-gray-500&quot;&gt;No commits this day&lt;/div&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;                    )}&#10;&#10;                    &lt;div className=&quot;flex justify-between items-center mt-4 text-xs text-gray-500&quot;&gt;&#10;                        &lt;span&gt;Less&lt;/span&gt;&#10;                        &lt;div className=&quot;flex space-x-1&quot;&gt;&#10;                            &lt;div className=&quot;w-3 h-3 bg-gray-100 rounded&quot;&gt;&lt;/div&gt;&#10;                            &lt;div className=&quot;w-3 h-3 bg-sunset-orange bg-opacity-30 rounded&quot;&gt;&lt;/div&gt;&#10;                            &lt;div className=&quot;w-3 h-3 bg-sunset-orange bg-opacity-60 rounded&quot;&gt;&lt;/div&gt;&#10;                            &lt;div className=&quot;w-3 h-3 bg-sunset-orange rounded&quot;&gt;&lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;span&gt;More&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            );&#10;        };&#10;&#10;        const ProgressBar = ({ progress, canEdit, onUpdate }) =&gt; {&#10;            const [editing, setEditing] = useState(false);&#10;            const [newProgress, setNewProgress] = useState(progress);&#10;&#10;            const handleUpdate = async () =&gt; {&#10;                await onUpdate(newProgress);&#10;                setEditing(false);&#10;            };&#10;&#10;            return (&#10;                &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6 hover-lift&quot;&gt;&#10;                    &lt;div className=&quot;flex justify-between items-center mb-4&quot;&gt;&#10;                        &lt;h3 className=&quot;text-xl font-bold text-gray-800 flex items-center&quot;&gt;&#10;                             Thesis Progress&#10;                        &lt;/h3&gt;&#10;                        {canEdit &amp;&amp; (&#10;                            &lt;button&#10;                                onClick={() =&gt; setEditing(!editing)}&#10;                                className=&quot;tooltip bg-sunset-orange text-white px-3 py-1 rounded-full text-sm hover:bg-sunset-dark transition-colors&quot;&#10;                                data-tooltip=&quot;Edit Progress&quot;&#10;                            &gt;&#10;                                &lt;i className=&quot;fas fa-edit&quot;&gt;&lt;/i&gt;&#10;                            &lt;/button&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;&#10;                    {editing ? (&#10;                        &lt;div className=&quot;space-y-4&quot;&gt;&#10;                            &lt;input&#10;                                type=&quot;range&quot;&#10;                                min=&quot;0&quot;&#10;                                max=&quot;100&quot;&#10;                                value={newProgress}&#10;                                onChange={(e) =&gt; setNewProgress(parseInt(e.target.value))}&#10;                                className=&quot;w-full&quot;&#10;                            /&gt;&#10;                            &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                &lt;span className=&quot;text-lg font-semibold&quot;&gt;{newProgress}%&lt;/span&gt;&#10;                                &lt;div className=&quot;space-x-2&quot;&gt;&#10;                                    &lt;button&#10;                                        onClick={handleUpdate}&#10;                                        className=&quot;bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition-colors&quot;&#10;                                    &gt;&#10;                                        Save&#10;                                    &lt;/button&gt;&#10;                                    &lt;button&#10;                                        onClick={() =&gt; setEditing(false)}&#10;                                        className=&quot;bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition-colors&quot;&#10;                                    &gt;&#10;                                        Cancel&#10;                                    &lt;/button&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    ) : (&#10;                        &lt;&gt;&#10;                            &lt;div className=&quot;w-full bg-gray-200 rounded-full h-4 mb-2&quot;&gt;&#10;                                &lt;div&#10;                                    className=&quot;progress-bar h-4 rounded-full transition-all duration-500 animate-pulse-orange&quot;&#10;                                    style={{ width: `${progress}%` }}&#10;                                &gt;&lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;text-right&quot;&gt;&#10;                                &lt;span className=&quot;text-2xl font-bold text-sunset-orange&quot;&gt;{progress}%&lt;/span&gt;&#10;                                &lt;span className=&quot;text-gray-600 ml-2&quot;&gt;Complete&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;            );&#10;        };&#10;&#10;        const ActivityFeed = ({ commits }) =&gt; {&#10;            const [expandedCommit, setExpandedCommit] = useState(null);&#10;&#10;            return (&#10;                &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6 hover-lift&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-bold text-gray-800 mb-4 flex items-center&quot;&gt;&#10;                        &lt;i className=&quot;fab fa-github mr-2&quot;&gt;&lt;/i&gt;&#10;                        Recent Commits&#10;                    &lt;/h3&gt;&#10;                    &lt;div className=&quot;space-y-4 max-h-96 overflow-y-auto&quot;&gt;&#10;                        {commits.slice(0, 10).map((commit, index) =&gt; (&#10;                            &lt;div key={commit.sha} className=&quot;border-l-4 border-sunset-orange pl-4 animate-slide-up&quot; style={{animationDelay: `${index * 0.1}s`}}&gt;&#10;                                &lt;div className=&quot;flex justify-between items-start&quot;&gt;&#10;                                    &lt;div className=&quot;flex-1&quot;&gt;&#10;                                        &lt;p className=&quot;font-medium text-gray-800&quot;&gt;&#10;                                            {commit.commit.message.split('\n')[0]}&#10;                                        &lt;/p&gt;&#10;                                        &lt;p className=&quot;text-sm text-gray-600&quot;&gt;&#10;                                            by {commit.commit.author.name} • {new Date(commit.commit.author.date).toLocaleDateString()}&#10;                                        &lt;/p&gt;&#10;                                        {expandedCommit === commit.sha &amp;&amp; commit.commit.message.length &gt; commit.commit.message.split('\n')[0].length &amp;&amp; (&#10;                                            &lt;p className=&quot;text-sm text-gray-700 mt-2 bg-gray-50 p-2 rounded&quot;&gt;&#10;                                                {commit.commit.message.split('\n').slice(1).join('\n') || 'No description'}&#10;                                            &lt;/p&gt;&#10;                                        )}&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;flex space-x-2 ml-4&quot;&gt;&#10;                                        {commit.commit.message.split('\n').length &gt; 1 &amp;&amp; (&#10;                                            &lt;button&#10;                                                onClick={() =&gt; setExpandedCommit(expandedCommit === commit.sha ? null : commit.sha)}&#10;                                                className=&quot;tooltip text-sunset-orange hover:text-sunset-dark transition-colors&quot;&#10;                                                data-tooltip=&quot;Toggle Description&quot;&#10;                                            &gt;&#10;                                                &lt;i className={`fas fa-chevron-${expandedCommit === commit.sha ? 'up' : 'down'}`}&gt;&lt;/i&gt;&#10;                                            &lt;/button&gt;&#10;                                        )}&#10;                                        &lt;a&#10;                                            href={commit.html_url}&#10;                                            target=&quot;_blank&quot;&#10;                                            rel=&quot;noopener noreferrer&quot;&#10;                                            className=&quot;tooltip bg-sunset-orange text-white px-3 py-1 rounded text-sm hover:bg-sunset-dark transition-colors&quot;&#10;                                            data-tooltip=&quot;View on GitHub&quot;&#10;                                        &gt;&#10;                                            View&#10;                                        &lt;/a&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        ))}&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            );&#10;        };&#10;&#10;        // UPDATED: Repository Tree Component (Main folders + Data with CSV only)&#10;        const RepoTree = ({ tree, onFileClick }) =&gt; {&#10;            const getFileIcon = (path, type) =&gt; {&#10;                if (type === 'tree') return '';&#10;                if (path.endsWith('.csv')) return '';&#10;                if (path.endsWith('.py')) return '';&#10;                if (path.endsWith('.md')) return '';&#10;                if (path.endsWith('.json')) return '';&#10;                return '';&#10;            };&#10;&#10;            // Filter and organize tree structure&#10;            const organizeTree = (items) =&gt; {&#10;                const mainFolders = {};&#10;                const dataFiles = [];&#10;&#10;                items.forEach(item =&gt; {&#10;                    const pathParts = item.path.split('/');&#10;                    const topLevel = pathParts[0];&#10;&#10;                    if (topLevel === 'data' &amp;&amp; item.path.endsWith('.csv')) {&#10;                        dataFiles.push(item);&#10;                    } else if (pathParts.length === 1 &amp;&amp; item.type === 'tree') {&#10;                        // Only show main folders&#10;                        mainFolders[topLevel] = item;&#10;                    }&#10;                });&#10;&#10;                return { mainFolders, dataFiles };&#10;            };&#10;&#10;            const { mainFolders, dataFiles } = organizeTree(tree);&#10;&#10;            return (&#10;                &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6 hover-lift&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-bold text-gray-800 mb-4 flex items-center&quot;&gt;&#10;                         Repository Structure&#10;                    &lt;/h3&gt;&#10;&#10;                    &lt;div className=&quot;space-y-2&quot;&gt;&#10;                        {/* Main Folders (Non-interactive) */}&#10;                        {Object.entries(mainFolders).map(([name, item]) =&gt; (&#10;                            &lt;div key={name} className=&quot;flex items-center py-2 px-3 bg-gray-50 rounded animate-slide-up&quot;&gt;&#10;                                &lt;span className=&quot;mr-3 text-lg&quot;&gt;&lt;/span&gt;&#10;                                &lt;span className=&quot;text-gray-700 font-medium&quot;&gt;{name}&lt;/span&gt;&#10;                                {name !== 'data' &amp;&amp; (&#10;                                    &lt;span className=&quot;ml-auto text-xs text-gray-500&quot;&gt;Non-interactive&lt;/span&gt;&#10;                                )}&#10;                            &lt;/div&gt;&#10;                        ))}&#10;&#10;                        {/* Data Folder with CSV Files */}&#10;                        {dataFiles.length &gt; 0 &amp;&amp; (&#10;                            &lt;div className=&quot;mt-4&quot;&gt;&#10;                                &lt;div className=&quot;flex items-center py-2 px-3 bg-sunset-orange bg-opacity-10 rounded-t&quot;&gt;&#10;                                    &lt;span className=&quot;mr-3 text-lg&quot;&gt;&lt;/span&gt;&#10;                                    &lt;span className=&quot;text-gray-800 font-semibold&quot;&gt;Data&#10;                                      &lt;span className=&quot;ml-2 text-xs italic text-gray-500&quot;&gt;datasets&lt;/span&gt;&#10;                                    &lt;/span&gt;&#10;                                    &lt;span className=&quot;ml-auto text-xs text-sunset-orange font-medium&quot;&gt;&#10;                                        {dataFiles.length} CSV files&#10;                                    &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;bg-gray-50 rounded-b p-2 space-y-1&quot;&gt;&#10;                                    {dataFiles.map((file, index) =&gt; (&#10;                                        &lt;div&#10;                                            key={file.path}&#10;                                            className=&quot;flex items-center py-2 px-3 hover:bg-white rounded cursor-pointer transition-colors animate-slide-up&quot;&#10;                                            style={{animationDelay: `${index * 0.1}s`}}&#10;                                            onClick={() =&gt; onFileClick(file.path)}&#10;                                        &gt;&#10;                                            &lt;span className=&quot;mr-3&quot;&gt;&lt;/span&gt;&#10;                                            &lt;span className=&quot;text-gray-700&quot;&gt;{file.path.split('/').pop()}&lt;/span&gt;&#10;                                            &lt;span className=&quot;ml-auto text-xs bg-sunset-orange text-white px-2 py-1 rounded&quot;&gt;&#10;                                                Preview&#10;                                            &lt;/span&gt;&#10;                                        &lt;/div&gt;&#10;                                    ))}&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;&#10;                        {/* Instructions */}&#10;                        &lt;div className=&quot;mt-4 p-3 bg-blue-50 rounded-lg&quot;&gt;&#10;                            &lt;p className=&quot;text-sm text-blue-800&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-info-circle mr-2&quot;&gt;&lt;/i&gt;&#10;                                &lt;strong&gt;Instructions:&lt;/strong&gt; Click on CSV files in the Datasets section to preview data.&#10;                                Other folders are for reference only.&#10;                            &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            );&#10;        };&#10;&#10;        const CSVPreview = ({ csvData, fileName, canExpand }) =&gt; {&#10;            const [expanded, setExpanded] = useState(false);&#10;            const [rows, setRows] = useState([]);&#10;&#10;            useEffect(() =&gt; {&#10;                if (csvData) {&#10;                    const lines = csvData.split('\n').filter(line =&gt; line.trim());&#10;                    const headers = lines[0].split(',');&#10;                    const dataRows = lines.slice(1, expanded ? 51 : 6).map(line =&gt; line.split(','));&#10;                    setRows([headers, ...dataRows]);&#10;                }&#10;            }, [csvData, expanded]);&#10;&#10;            return (&#10;                &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex justify-between items-center mb-4&quot;&gt;&#10;                        &lt;h3 className=&quot;text-xl font-bold text-gray-800 flex items-center&quot;&gt;&#10;                             {fileName}&#10;                        &lt;/h3&gt;&#10;                        {canExpand &amp;&amp; (&#10;                            &lt;button&#10;                                onClick={() =&gt; setExpanded(!expanded)}&#10;                                className=&quot;bg-sunset-orange text-white px-4 py-2 rounded hover:bg-sunset-dark transition-colors&quot;&#10;                            &gt;&#10;                                {expanded ? 'Show Less' : 'Show More (50 rows)'}&#10;                            &lt;/button&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;overflow-x-auto&quot;&gt;&#10;                        &lt;table className=&quot;min-w-full table-auto&quot;&gt;&#10;                            &lt;thead&gt;&#10;                                &lt;tr className=&quot;bg-gray-50&quot;&gt;&#10;                                    {rows[0]?.map((header, index) =&gt; (&#10;                                        &lt;th key={index} className=&quot;px-4 py-2 text-left text-sm font-medium text-gray-700 border-b&quot;&gt;&#10;                                            {header}&#10;                                        &lt;/th&gt;&#10;                                    ))}&#10;                                &lt;/tr&gt;&#10;                            &lt;/thead&gt;&#10;                            &lt;tbody&gt;&#10;                                {rows.slice(1).map((row, index) =&gt; (&#10;                                    &lt;tr key={index} className=&quot;hover:bg-gray-50&quot;&gt;&#10;                                        {row.map((cell, cellIndex) =&gt; (&#10;                                            &lt;td key={cellIndex} className=&quot;px-4 py-2 text-sm text-gray-600 border-b&quot;&gt;&#10;                                                {cell}&#10;                                            &lt;/td&gt;&#10;                                        ))}&#10;                                    &lt;/tr&gt;&#10;                                ))}&#10;                            &lt;/tbody&gt;&#10;                        &lt;/table&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            );&#10;        };&#10;&#10;        // UPDATED: Notes Section (Public display + Admin editing)&#10;        const NotesSection = ({ notes, onAddNote, canEdit, isPublic = false }) =&gt; {&#10;            const [showAddForm, setShowAddForm] = useState(false);&#10;            const [newNote, setNewNote] = useState('');&#10;&#10;            const handleAddNote = async () =&gt; {&#10;                if (newNote.trim()) {&#10;                    await onAddNote({&#10;                        content: newNote,&#10;                        date: new Date().toISOString().split('T')[0]&#10;                    });&#10;                    setNewNote('');&#10;                    setShowAddForm(false);&#10;                }&#10;            };&#10;&#10;            return (&#10;                &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6 hover-lift&quot;&gt;&#10;                    &lt;div className=&quot;flex justify-between items-center mb-4&quot;&gt;&#10;                        &lt;h3 className=&quot;text-xl font-bold text-gray-800 flex items-center&quot;&gt;&#10;                             {isPublic ? 'Latest Updates' : 'Notes &amp; Updates'}&#10;                        &lt;/h3&gt;&#10;                        {canEdit &amp;&amp; !isPublic &amp;&amp; (&#10;                            &lt;button&#10;                                onClick={() =&gt; setShowAddForm(!showAddForm)}&#10;                                className=&quot;tooltip bg-sunset-orange text-white px-4 py-2 rounded hover:bg-sunset-dark transition-colors&quot;&#10;                                data-tooltip=&quot;Add Note&quot;&#10;                            &gt;&#10;                                &lt;i className=&quot;fas fa-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                                Add Note&#10;                            &lt;/button&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;&#10;                    {showAddForm &amp;&amp; !isPublic &amp;&amp; (&#10;                        &lt;div className=&quot;mb-4 p-4 bg-gray-50 rounded-lg animate-slide-up&quot;&gt;&#10;                            &lt;textarea&#10;                                value={newNote}&#10;                                onChange={(e) =&gt; setNewNote(e.target.value)}&#10;                                placeholder=&quot;Enter your note...&quot;&#10;                                className=&quot;w-full p-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-sunset-orange focus:border-transparent&quot;&#10;                                rows=&quot;3&quot;&#10;                            /&gt;&#10;                            &lt;div className=&quot;flex justify-end space-x-2 mt-2&quot;&gt;&#10;                                &lt;button&#10;                                    onClick={handleAddNote}&#10;                                    className=&quot;bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition-colors&quot;&#10;                                &gt;&#10;                                    Save&#10;                                &lt;/button&gt;&#10;                                &lt;button&#10;                                    onClick={() =&gt; setShowAddForm(false)}&#10;                                    className=&quot;bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition-colors&quot;&#10;                                &gt;&#10;                                    Cancel&#10;                                &lt;/button&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    )}&#10;&#10;                    &lt;div className=&quot;space-y-4 max-h-64 overflow-y-auto&quot;&gt;&#10;                        {notes.slice(0, isPublic ? 5 : notes.length).map((note, index) =&gt; (&#10;                            &lt;div key={note.id} className=&quot;border-l-4 border-sunset-orange pl-4 animate-slide-up&quot; style={{animationDelay: `${index * 0.1}s`}}&gt;&#10;                                &lt;p className=&quot;text-gray-800&quot;&gt;{note.content}&lt;/p&gt;&#10;                                &lt;p className=&quot;text-sm text-gray-600 mt-1&quot;&gt;&#10;                                    {new Date(note.date).toLocaleDateString()} • by {note.author}&#10;                                &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        ))}&#10;                        {notes.length === 0 &amp;&amp; (&#10;                            &lt;div className=&quot;text-center text-gray-500 py-8&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-sticky-note text-4xl mb-2 opacity-50&quot;&gt;&lt;/i&gt;&#10;                                &lt;p&gt;No updates yet&lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            );&#10;        };&#10;&#10;        const LoginForm = ({ onLogin }) =&gt; {&#10;            const [username, setUsername] = useState('');&#10;            const [password, setPassword] = useState('');&#10;            const [loading, setLoading] = useState(false);&#10;            const [error, setError] = useState('');&#10;&#10;            const handleLogin = async () =&gt; {&#10;                setLoading(true);&#10;                setError('');&#10;                try {&#10;                    const result = await api.login(username, password);&#10;                    if (result.success) {&#10;                        onLogin(result.user);&#10;                    } else {&#10;                        setError(result.message);&#10;                    }&#10;                } catch (err) {&#10;                    setError('Login failed. Please try again.');&#10;                } finally {&#10;                    setLoading(false);&#10;                }&#10;            };&#10;&#10;            return (&#10;                &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50&quot;&gt;&#10;                    &lt;div className=&quot;bg-white rounded-lg p-8 max-w-md w-full mx-4 animate-slide-up&quot;&gt;&#10;                        &lt;h2 className=&quot;text-2xl font-bold text-gray-800 mb-6 text-center&quot;&gt;&#10;                             Login to Dashboard&#10;                        &lt;/h2&gt;&#10;&#10;                        {error &amp;&amp; (&#10;                            &lt;div className=&quot;bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4&quot;&gt;&#10;                                {error}&#10;                            &lt;/div&gt;&#10;                        )}&#10;&#10;                        &lt;div className=&quot;space-y-4&quot;&gt;&#10;                            &lt;input&#10;                                type=&quot;text&quot;&#10;                                placeholder=&quot;Username&quot;&#10;                                value={username}&#10;                                onChange={(e) =&gt; setUsername(e.target.value)}&#10;                                className=&quot;w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-sunset-orange focus:border-transparent&quot;&#10;                            /&gt;&#10;                            &lt;input&#10;                                type=&quot;password&quot;&#10;                                placeholder=&quot;Password&quot;&#10;                                value={password}&#10;                                onChange={(e) =&gt; setPassword(e.target.value)}&#10;                                className=&quot;w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-sunset-orange focus:border-transparent&quot;&#10;                            /&gt;&#10;                            &lt;button&#10;                                onClick={handleLogin}&#10;                                disabled={loading}&#10;                                className=&quot;w-full bg-sunset-orange text-white py-3 rounded-lg hover:bg-sunset-dark transition-colors disabled:opacity-50&quot;&#10;                            &gt;&#10;                                {loading ? 'Logging in...' : 'Login'}&#10;                            &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div className=&quot;mt-4 text-sm text-gray-600 text-center&quot;&gt;&#10;                            &lt;!-- &lt;p&gt;&lt;strong&gt;Demo credentials:&lt;/strong&gt;&lt;/p&gt;&#10;                            &lt;p&gt;Admin: admin/admin123&lt;/p&gt;&#10;                            &lt;p&gt;Supervisor: supervisor/super123&lt;/p&gt;--&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            );&#10;        };&#10;&#10;        // Main App Component&#10;        const App = () =&gt; {&#10;            const [user, setUser] = useState(null);&#10;            const [showLogin, setShowLogin] = useState(false);&#10;            const [progress, setProgress] = useState(0);&#10;            const [commits, setCommits] = useState([]);&#10;            const [repoTree, setRepoTree] = useState([]);&#10;            const [notes, setNotes] = useState([]);&#10;            const [selectedFile, setSelectedFile] = useState(null);&#10;            const [csvData, setCsvData] = useState('');&#10;            const [loading, setLoading] = useState(true);&#10;&#10;            useEffect(() =&gt; {&#10;                loadInitialData();&#10;            }, []);&#10;&#10;            const loadInitialData = async () =&gt; {&#10;                try {&#10;                    const [progressData, commitsData, treeData, notesData] = await Promise.all([&#10;                        api.getProgress(),&#10;                        api.getCommits(),&#10;                        api.getRepoTree(),&#10;                        api.getNotes()&#10;                    ]);&#10;&#10;                    setProgress(progressData.progress);&#10;                    setCommits(commitsData);&#10;                    setRepoTree(treeData.tree || []);&#10;                    setNotes(notesData);&#10;                } catch (error) {&#10;                    console.error('Error loading initial data:', error);&#10;                } finally {&#10;                    setLoading(false);&#10;                }&#10;            };&#10;&#10;            const handleLogin = (userData) =&gt; {&#10;                setUser(userData);&#10;                setShowLogin(false);&#10;            };&#10;&#10;            const handleLogout = () =&gt; {&#10;                setUser(null);&#10;            };&#10;&#10;            const handleProgressUpdate = async (newProgress) =&gt; {&#10;                await api.updateProgress(newProgress);&#10;                setProgress(newProgress);&#10;            };&#10;&#10;            const handleAddNote = async (note) =&gt; {&#10;                const result = await api.addNote(note);&#10;                if (result.success) {&#10;                    setNotes([...notes, { ...note, id: result.id, author: user.username }]);&#10;                }&#10;            };&#10;&#10;            const handleFileClick = async (path) =&gt; {&#10;                if (path.includes('data/') &amp;&amp; path.endsWith('.csv')) {&#10;                    setSelectedFile(path);&#10;                    const content = await api.getFileContent(path);&#10;                    setCsvData(content);&#10;                } else {&#10;                    window.open(`https://github.com/${CONFIG.GITHUB_REPO}/blob/main/${path}`, '_blank');&#10;                }&#10;            };&#10;&#10;            const canEdit = user &amp;&amp; (user.role === 'admin' || user.role === 'editor');&#10;            const isAdmin = user &amp;&amp; user.role === 'admin';&#10;&#10;            if (loading) {&#10;                return (&#10;                    &lt;div className=&quot;min-h-screen flex items-center justify-center&quot;&gt;&#10;                        &lt;LoadingSpinner /&gt;&#10;                    &lt;/div&gt;&#10;                );&#10;            }&#10;&#10;            return (&#10;                &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;                    {/* Header */}&#10;                    &lt;header className=&quot;bg-white shadow-sm border-b-2 border-sunset-orange&quot;&gt;&#10;                        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;                            &lt;div className=&quot;flex justify-between items-center py-4&quot;&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                                    &lt;div className=&quot;text-3xl&quot;&gt;&lt;/div&gt;&#10;                                    &lt;div&gt;&#10;                                        &lt;h1 className=&quot;text-2xl font-bold text-gray-900&quot;&gt;&#10;                                            Geospatial Tagging Thesis&#10;                                        &lt;/h1&gt;&#10;                                        &lt;p className=&quot;text-sm text-gray-600&quot;&gt;&#10;                                            MS-AI Thesis by Faizan Shah Ahmad&#10;                                        &lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                                    {user ? (&#10;                                        &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                                            &lt;span className=&quot;text-sm text-gray-600&quot;&gt;&#10;                                                Welcome, {user.username} ({user.role})&#10;                                            &lt;/span&gt;&#10;                                            &lt;button&#10;                                                onClick={handleLogout}&#10;                                                className=&quot;bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition-colors&quot;&#10;                                            &gt;&#10;                                                Logout&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                    ) : (&#10;                                        &lt;button&#10;                                            onClick={() =&gt; setShowLogin(true)}&#10;                                            className=&quot;bg-sunset-orange text-white px-4 py-2 rounded hover:bg-sunset-dark transition-colors&quot;&#10;                                        &gt;&#10;                                            Login&#10;                                        &lt;/button&gt;&#10;                                    )}&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/header&gt;&#10;&#10;                    {/* Main Content */}&#10;                    &lt;main className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;                        {/* Robot Greeting */}&#10;                        &lt;RobotGreeting /&gt;&#10;&#10;                        {/* Progress Section */}&#10;                        &lt;div className=&quot;mb-8&quot;&gt;&#10;                            &lt;ProgressBar&#10;                                progress={progress}&#10;                                canEdit={isAdmin}&#10;                                onUpdate={handleProgressUpdate}&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        {/* Activity Chart */}&#10;                        &lt;div className=&quot;mb-8&quot;&gt;&#10;                            &lt;GitHubActivityChart commits={commits} /&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        {/* Main Grid */}&#10;                        &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8&quot;&gt;&#10;                            {/* Activity Feed */}&#10;                            &lt;ActivityFeed commits={commits} /&gt;&#10;&#10;                            {/* Notes Section - Always visible, but editing only for logged in users */}&#10;                            &lt;NotesSection&#10;                                notes={notes}&#10;                                onAddNote={handleAddNote}&#10;                                canEdit={canEdit}&#10;                                isPublic={!user}&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        {/* Repository Tree */}&#10;                        &lt;div className=&quot;mb-8&quot;&gt;&#10;                            &lt;RepoTree tree={repoTree} onFileClick={handleFileClick} /&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        {/* CSV Preview Modal */}&#10;                        {selectedFile &amp;&amp; csvData &amp;&amp; (&#10;                            &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4&quot;&gt;&#10;                                &lt;div className=&quot;bg-white rounded-lg max-w-6xl w-full max-h-[90vh] overflow-hidden&quot;&gt;&#10;                                    &lt;div className=&quot;flex justify-between items-center p-4 border-b&quot;&gt;&#10;                                        &lt;h3 className=&quot;text-lg font-bold&quot;&gt;CSV Preview: {selectedFile}&lt;/h3&gt;&#10;                                        &lt;button&#10;                                            onClick={() =&gt; {&#10;                                                setSelectedFile(null);&#10;                                                setCsvData('');&#10;                                            }}&#10;                                            className=&quot;text-gray-500 hover:text-gray-700&quot;&#10;                                        &gt;&#10;                                            &lt;i className=&quot;fas fa-times text-xl&quot;&gt;&lt;/i&gt;&#10;                                        &lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;p-4 overflow-auto max-h-[80vh]&quot;&gt;&#10;                                        &lt;CSVPreview&#10;                                            csvData={csvData}&#10;                                            fileName={selectedFile.split('/').pop()}&#10;                                            canExpand={canEdit}&#10;                                        /&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                    &lt;/main&gt;&#10;&#10;                    {/* Footer */}&#10;                    &lt;footer className=&quot;bg-white border-t border-gray-200 mt-16&quot;&gt;&#10;                        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;                            &lt;div className=&quot;text-center&quot;&gt;&#10;                                &lt;p className=&quot;text-gray-600&quot;&gt;&#10;                                    © 2025 Faizan Shah Ahmad • Air University, Islamabad&#10;                                &lt;/p&gt;&#10;                                &lt;div className=&quot;flex justify-center space-x-4 mt-4&quot;&gt;&#10;                                    &lt;a&#10;                                        href={`https://github.com/${CONFIG.GITHUB_REPO}`}&#10;                                        target=&quot;_blank&quot;&#10;                                        rel=&quot;noopener noreferrer&quot;&#10;                                        className=&quot;text-sunset-orange hover:text-sunset-dark transition-colors&quot;&#10;                                    &gt;&#10;                                        &lt;i className=&quot;fab fa-github text-xl&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/a&gt;&#10;                                    &lt;a&#10;                                        href=&quot;https://github.com/phaze7r/osm-dynamic-api&quot;&#10;                                        target=&quot;_blank&quot;&#10;                                        rel=&quot;noopener noreferrer&quot;&#10;                                        className=&quot;text-sunset-orange hover:text-sunset-dark transition-colors&quot;&#10;                                    &gt;&#10;                                        &lt;i className=&quot;fas fa-server text-xl&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/a&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/footer&gt;&#10;&#10;                    {/* Login Modal */}&#10;                    {showLogin &amp;&amp; &lt;LoginForm onLogin={handleLogin} /&gt;}&#10;                &lt;/div&gt;&#10;            );&#10;        };&#10;&#10;        ReactDOM.render(&lt;App /&gt;, document.getElementById('root'));&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;MS Thesis Progress Tracker - Geospatial Tagging &lt;/title&gt;&#10;&#10;    &lt;!-- Favicon --&gt;&#10;    &lt;link rel=&quot;icon&quot; href=&quot;data:image/svg+xml,&lt;svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'&gt;&lt;text y='.9em' font-size='90'&gt;&lt;/text&gt;&lt;/svg&gt;&quot;&gt;&#10;&#10;    &lt;!-- External Libraries --&gt;&#10;    &lt;script src=&quot;https://unpkg.com/react@18/umd/react.production.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;https://unpkg.com/react-dom@18/umd/react-dom.production.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;https://unpkg.com/@babel/standalone/babel.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js&quot;&gt;&lt;/script&gt;&#10;&#10;    &lt;!-- Tailwind CSS --&gt;&#10;    &lt;script src=&quot;https://cdn.tailwindcss.com&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        tailwind.config = {&#10;            theme: {&#10;                extend: {&#10;                    colors: {&#10;                        'sunset-orange': '#F28C38',&#10;                        'sunset-light': '#F5A962',&#10;                        'sunset-dark': '#E67E22'&#10;                    },&#10;                    animation: {&#10;                        'fade-in': 'fadeIn 0.5s ease-in-out',&#10;                        'slide-up': 'slideUp 0.6s ease-out',&#10;                        'bounce-gentle': 'bounceGentle 2s infinite',&#10;                        'pulse-orange': 'pulseOrange 2s infinite'&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    &lt;/script&gt;&#10;&#10;    &lt;!-- Mobile Stylesheet --&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;mobile-style.css&quot;&gt;&#10;&#10;    &lt;style&gt;&#10;        @keyframes fadeIn {&#10;            from { opacity: 0; }&#10;            to { opacity: 1; }&#10;        }&#10;&#10;        @keyframes slideUp {&#10;            from { transform: translateY(20px); opacity: 0; }&#10;            to { transform: translateY(0); opacity: 1; }&#10;        }&#10;&#10;        @keyframes bounceGentle {&#10;            0%, 20%, 50%, 80%, 100% { transform: translateY(0); }&#10;            40% { transform: translateY(-10px); }&#10;            60% { transform: translateY(-5px); }&#10;        }&#10;&#10;        @keyframes pulseOrange {&#10;            0%, 100% { box-shadow: 0 0 0 0 rgba(242, 140, 56, 0.7); }&#10;            70% { box-shadow: 0 0 0 10px rgba(242, 140, 56, 0); }&#10;        }&#10;&#10;        .glass-effect {&#10;            backdrop-filter: blur(10px);&#10;            background: rgba(255, 255, 255, 0.9);&#10;        }&#10;&#10;        .hover-lift {&#10;            transition: transform 0.3s ease, box-shadow 0.3s ease;&#10;        }&#10;&#10;        .hover-lift:hover {&#10;            transform: translateY(-5px);&#10;            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);&#10;        }&#10;&#10;        .progress-bar {&#10;            background: linear-gradient(90deg, #F28C38 0%, #F5A962 100%);&#10;        }&#10;&#10;        .robot-animation {&#10;            animation: bounceGentle 2s infinite;&#10;        }&#10;&#10;        .tooltip {&#10;            position: relative;&#10;        }&#10;&#10;        .tooltip:hover::after {&#10;            content: attr(data-tooltip);&#10;            position: absolute;&#10;            bottom: 100%;&#10;            left: 50%;&#10;            transform: translateX(-50%);&#10;            background: #333;&#10;            color: white;&#10;            padding: 5px 10px;&#10;            border-radius: 4px;&#10;            font-size: 12px;&#10;            white-space: nowrap;&#10;            z-index: 1000;&#10;        }&#10;&#10;        .activity-cell {&#10;            transition: all 0.2s ease;&#10;        }&#10;&#10;        .activity-cell:hover {&#10;            transform: scale(1.1);&#10;            z-index: 10;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body class=&quot;bg-white min-h-screen&quot;&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;&#10;    &lt;script type=&quot;text/babel&quot;&gt;&#10;        const { useState, useEffect, useRef } = React;&#10;&#10;        // Configuration - UPDATE THESE WITH YOUR ACTUAL ENDPOINTS&#10;        const CONFIG = {&#10;            GITHUB_REPO: 'phaze7r/geospatial-tagging-thesis',&#10;            BACKEND_API: 'https://your-heroku-backend.herokuapp.com/api', // UPDATE THIS&#10;            MONGODB_URI: 'mongodb+srv://phaze7r:UBlzckErSAKPnwID@osm-cluster.scxgk9j.mongodb.net/?retryWrites=true&amp;w=majority&amp;appName=osm-cluster'&#10;        };&#10;&#10;        // Motivational quotes&#10;        const MOTIVATIONAL_QUOTES = [&#10;            &quot;Keep exploring the geospatial frontier! &quot;,&#10;            &quot;Every commit brings you closer to success! &quot;,&#10;            &quot;Data is the new oil, and you're the refiner! ⛽&quot;,&#10;            &quot;Mapping the world, one tag at a time! ️&quot;,&#10;            &quot;Your research will change how we see places! ️&quot;,&#10;            &quot;Geospatial intelligence is the future! &quot;,&#10;            &quot;Every dataset tells a story! &quot;,&#10;            &quot;Innovation happens at the intersection of data and geography! &quot;&#10;        ];&#10;&#10;        // Multilingual greetings&#10;        const GREETINGS = {&#10;            en: &quot;Welcome to my thesis journey! &quot;,&#10;            ur: &quot;میری تھیسس کے سفر میں خوش آمدید! &quot;,&#10;            ps: &quot;زموږ د تیسس سفر ته ښه راغلاست! &quot;,&#10;            es: &quot;¡Bienvenido a mi viaje de tesis! &quot;&#10;        };&#10;&#10;        // API functions - REPLACE WITH ACTUAL API CALLS&#10;        const api = {&#10;            // Authentication&#10;            login: async (username, password) =&gt; {&#10;                try {&#10;                    const response = await fetch(`${CONFIG.BACKEND_API}/auth/login`, {&#10;                        method: 'POST',&#10;                        headers: { 'Content-Type': 'application/json' },&#10;                        body: JSON.stringify({ username, password })&#10;                    });&#10;                    return await response.json();&#10;                } catch (error) {&#10;                    console.error('Login error:', error);&#10;                    // Fallback for demo&#10;                    if (username === 'admin' &amp;&amp; password === 'admin123') {&#10;                        return { success: true, user: { username, role: 'admin' } };&#10;                    } else if (username === 'supervisor' &amp;&amp; password === 'super123') {&#10;                        return { success: true, user: { username, role: 'editor' } };&#10;                    }&#10;                    return { success: false, message: 'Invalid credentials' };&#10;                }&#10;            },&#10;&#10;            // Progress&#10;            getProgress: async () =&gt; {&#10;                try {&#10;                    const response = await fetch(`${CONFIG.BACKEND_API}/progress`);&#10;                    return await response.json();&#10;                } catch (error) {&#10;                    console.error('Progress fetch error:', error);&#10;                    return { progress: 23 }; // Fallback&#10;                }&#10;            },&#10;&#10;            updateProgress: async (progress) =&gt; {&#10;                try {&#10;                    const response = await fetch(`${CONFIG.BACKEND_API}/progress`, {&#10;                        method: 'POST',&#10;                        headers: { 'Content-Type': 'application/json' },&#10;                        body: JSON.stringify({ progress })&#10;                    });&#10;                    return await response.json();&#10;                } catch (error) {&#10;                    console.error('Progress update error:', error);&#10;                    return { success: true }; // Fallback&#10;                }&#10;            },&#10;&#10;            // Notes&#10;            getNotes: async () =&gt; {&#10;                try {&#10;                    const response = await fetch(`${CONFIG.BACKEND_API}/notes`);&#10;                    return await response.json();&#10;                } catch (error) {&#10;                    console.error('Notes fetch error:', error);&#10;                    return [&#10;                        { id: 1, date: '2024-06-15', content: 'Started data collection phase', author: 'admin', createdAt: '2024-01-15T10:00:00Z' },&#10;                        { id: 2, date: '2024-05-20', content: 'Completed literature review', author: 'admin', createdAt: '2024-01-20T14:30:00Z' }&#10;                    ]; // Fallback&#10;                }&#10;            },&#10;&#10;            addNote: async (note) =&gt; {&#10;                try {&#10;                    const response = await fetch(`${CONFIG.BACKEND_API}/notes`, {&#10;                        method: 'POST',&#10;                        headers: { 'Content-Type': 'application/json' },&#10;                        body: JSON.stringify(note)&#10;                    });&#10;                    return await response.json();&#10;                } catch (error) {&#10;                    console.error('Add note error:', error);&#10;                    return { success: true, id: Date.now() }; // Fallback&#10;                }&#10;            },&#10;&#10;            // GitHub API&#10;            getCommits: async () =&gt; {&#10;                try {&#10;                    const response = await fetch(`https://api.github.com/repos/${CONFIG.GITHUB_REPO}/commits?per_page=50`);&#10;                    return await response.json();&#10;                } catch (error) {&#10;                    console.error('Error fetching commits:', error);&#10;                    return [];&#10;                }&#10;            },&#10;&#10;            getRepoTree: async () =&gt; {&#10;                try {&#10;                    const response = await fetch(`https://api.github.com/repos/${CONFIG.GITHUB_REPO}/git/trees/main?recursive=1`);&#10;                    return await response.json();&#10;                } catch (error) {&#10;                    console.error('Error fetching repo tree:', error);&#10;                    return { tree: [] };&#10;                }&#10;            },&#10;&#10;            getFileContent: async (path) =&gt; {&#10;                try {&#10;                    const response = await fetch(`https://api.github.com/repos/${CONFIG.GITHUB_REPO}/contents/${path}`);&#10;                    const data = await response.json();&#10;                    return atob(data.content);&#10;                } catch (error) {&#10;                    console.error('Error fetching file content:', error);&#10;                    return '';&#10;                }&#10;            }&#10;        };&#10;&#10;        // Utility functions&#10;        const getDateString = (date) =&gt; {&#10;            return date.toISOString().split('T')[0];&#10;        };&#10;&#10;        const getDayName = (date) =&gt; {&#10;            return date.toLocaleDateString('en-US', { weekday: 'short' });&#10;        };&#10;&#10;        const getLast7Days = () =&gt; {&#10;            const days = [];&#10;            for (let i = 6; i &gt;= 0; i--) {&#10;                const date = new Date();&#10;                date.setDate(date.getDate() - i);&#10;                days.push(date);&#10;            }&#10;            return days;&#10;        };&#10;&#10;        // Components&#10;        const LoadingSpinner = () =&gt; (&#10;            &lt;div className=&quot;flex justify-center items-center p-4&quot;&gt;&#10;                &lt;div className=&quot;animate-spin rounded-full h-8 w-8 border-b-2 border-sunset-orange&quot;&gt;&lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;&#10;        const RobotGreeting = () =&gt; {&#10;            const [currentLang, setCurrentLang] = useState('en');&#10;            const [currentQuote, setCurrentQuote] = useState('');&#10;&#10;            useEffect(() =&gt; {&#10;                // Cycle through languages&#10;                const langInterval = setInterval(() =&gt; {&#10;                    const langs = Object.keys(GREETINGS);&#10;                    const currentIndex = langs.indexOf(currentLang);&#10;                    const nextIndex = (currentIndex + 1) % langs.length;&#10;                    setCurrentLang(langs[nextIndex]);&#10;                }, 3000);&#10;&#10;                // Random quote&#10;                setCurrentQuote(MOTIVATIONAL_QUOTES[Math.floor(Math.random() * MOTIVATIONAL_QUOTES.length)]);&#10;&#10;                return () =&gt; clearInterval(langInterval);&#10;            }, [currentLang]);&#10;&#10;            return (&#10;                &lt;div className=&quot;text-center mb-8 animate-fade-in&quot;&gt;&#10;                    &lt;div className=&quot;robot-animation text-6xl mb-4&quot;&gt;&lt;/div&gt;&#10;                    &lt;h2 className=&quot;text-2xl font-bold text-gray-800 mb-2&quot;&gt;&#10;                        {GREETINGS[currentLang]}&#10;                    &lt;/h2&gt;&#10;                    &lt;p className=&quot;text-sunset-orange font-medium&quot;&gt;{currentQuote}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;            );&#10;        };&#10;&#10;        // NEW: GitHub Activity Chart Component&#10;        const GitHubActivityChart = ({ commits }) =&gt; {&#10;            const [activityData, setActivityData] = useState({});&#10;            const [hoveredDay, setHoveredDay] = useState(null);&#10;&#10;            useEffect(() =&gt; {&#10;                if (commits.length &gt; 0) {&#10;                    const last7Days = getLast7Days();&#10;                    const activity = {};&#10;&#10;                    // Initialize all days with 0 commits&#10;                    last7Days.forEach(date =&gt; {&#10;                        activity[getDateString(date)] = {&#10;                            count: 0,&#10;                            commits: [],&#10;                            date: date&#10;                        };&#10;                    });&#10;&#10;                    // Count commits for each day&#10;                    commits.forEach(commit =&gt; {&#10;                        const commitDate = getDateString(new Date(commit.commit.author.date));&#10;                        if (activity[commitDate]) {&#10;                            activity[commitDate].count++;&#10;                            activity[commitDate].commits.push(commit);&#10;                        }&#10;                    });&#10;&#10;                    setActivityData(activity);&#10;                }&#10;            }, [commits]);&#10;&#10;            const getIntensityColor = (count) =&gt; {&#10;                if (count === 0) return 'bg-gray-100';&#10;                if (count &lt;= 2) return 'bg-sunset-orange bg-opacity-30';&#10;                if (count &lt;= 4) return 'bg-sunset-orange bg-opacity-60';&#10;                return 'bg-sunset-orange';&#10;            };&#10;&#10;            const last7Days = getLast7Days();&#10;&#10;            return (&#10;                &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6 hover-lift&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-bold text-gray-800 mb-4 flex items-center&quot;&gt;&#10;                         Weekly Activity&#10;                    &lt;/h3&gt;&#10;&#10;                    &lt;div className=&quot;flex justify-between items-center mb-4&quot;&gt;&#10;                        {last7Days.map((date, index) =&gt; {&#10;                            const dateStr = getDateString(date);&#10;                            const dayData = activityData[dateStr] || { count: 0, commits: [] };&#10;&#10;                            return (&#10;                                &lt;div key={dateStr} className=&quot;flex flex-col items-center&quot;&gt;&#10;                                    &lt;div className=&quot;text-xs text-gray-600 mb-2 font-medium&quot;&gt;&#10;                                        {getDayName(date)}&#10;                                    &lt;/div&gt;&#10;                                    &lt;div&#10;                                        className={`w-8 h-8 rounded-lg activity-cell cursor-pointer tooltip ${getIntensityColor(dayData.count)} border border-gray-200`}&#10;                                        data-tooltip={`${dayData.count} commits on ${date.toLocaleDateString()}`}&#10;                                        onMouseEnter={() =&gt; setHoveredDay(dateStr)}&#10;                                        onMouseLeave={() =&gt; setHoveredDay(null)}&#10;                                    &gt;&#10;                                        &lt;div className=&quot;w-full h-full flex items-center justify-center text-xs font-bold text-gray-700&quot;&gt;&#10;                                            {dayData.count &gt; 0 ? dayData.count : ''}&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;text-xs text-gray-500 mt-1&quot;&gt;&#10;                                        {date.getDate()}&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            );&#10;                        })}&#10;                    &lt;/div&gt;&#10;&#10;                    {/* Hover details */}&#10;                    {hoveredDay &amp;&amp; activityData[hoveredDay] &amp;&amp; (&#10;                        &lt;div className=&quot;mt-4 p-3 bg-gray-50 rounded-lg animate-fade-in&quot;&gt;&#10;                            &lt;h4 className=&quot;font-semibold text-gray-800 mb-2&quot;&gt;&#10;                                {activityData[hoveredDay].date.toLocaleDateString('en-US', {&#10;                                    weekday: 'long',&#10;                                    year: 'numeric',&#10;                                    month: 'long',&#10;                                    day: 'numeric'&#10;                                })}&#10;                            &lt;/h4&gt;&#10;                            {activityData[hoveredDay].commits.length &gt; 0 ? (&#10;                                &lt;div className=&quot;space-y-1&quot;&gt;&#10;                                    {activityData[hoveredDay].commits.slice(0, 3).map(commit =&gt; (&#10;                                        &lt;div key={commit.sha} className=&quot;text-sm text-gray-600&quot;&gt;&#10;                                            • {commit.commit.message.split('\n')[0]}&#10;                                        &lt;/div&gt;&#10;                                    ))}&#10;                                    {activityData[hoveredDay].commits.length &gt; 3 &amp;&amp; (&#10;                                        &lt;div className=&quot;text-xs text-gray-500&quot;&gt;&#10;                                            +{activityData[hoveredDay].commits.length - 3} more commits&#10;                                        &lt;/div&gt;&#10;                                    )}&#10;                                &lt;/div&gt;&#10;                            ) : (&#10;                                &lt;div className=&quot;text-sm text-gray-500&quot;&gt;No commits this day&lt;/div&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;                    )}&#10;&#10;                    &lt;div className=&quot;flex justify-between items-center mt-4 text-xs text-gray-500&quot;&gt;&#10;                        &lt;span&gt;Less&lt;/span&gt;&#10;                        &lt;div className=&quot;flex space-x-1&quot;&gt;&#10;                            &lt;div className=&quot;w-3 h-3 bg-gray-100 rounded&quot;&gt;&lt;/div&gt;&#10;                            &lt;div className=&quot;w-3 h-3 bg-sunset-orange bg-opacity-30 rounded&quot;&gt;&lt;/div&gt;&#10;                            &lt;div className=&quot;w-3 h-3 bg-sunset-orange bg-opacity-60 rounded&quot;&gt;&lt;/div&gt;&#10;                            &lt;div className=&quot;w-3 h-3 bg-sunset-orange rounded&quot;&gt;&lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;span&gt;More&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            );&#10;        };&#10;&#10;        const ProgressBar = ({ progress, canEdit, onUpdate }) =&gt; {&#10;            const [editing, setEditing] = useState(false);&#10;            const [newProgress, setNewProgress] = useState(progress);&#10;&#10;            const handleUpdate = async () =&gt; {&#10;                await onUpdate(newProgress);&#10;                setEditing(false);&#10;            };&#10;&#10;            return (&#10;                &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6 hover-lift&quot;&gt;&#10;                    &lt;div className=&quot;flex justify-between items-center mb-4&quot;&gt;&#10;                        &lt;h3 className=&quot;text-xl font-bold text-gray-800 flex items-center&quot;&gt;&#10;                             Thesis Progress&#10;                        &lt;/h3&gt;&#10;                        {canEdit &amp;&amp; (&#10;                            &lt;button&#10;                                onClick={() =&gt; setEditing(!editing)}&#10;                                className=&quot;tooltip bg-sunset-orange text-white px-3 py-1 rounded-full text-sm hover:bg-sunset-dark transition-colors&quot;&#10;                                data-tooltip=&quot;Edit Progress&quot;&#10;                            &gt;&#10;                                &lt;i className=&quot;fas fa-edit&quot;&gt;&lt;/i&gt;&#10;                            &lt;/button&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;&#10;                    {editing ? (&#10;                        &lt;div className=&quot;space-y-4&quot;&gt;&#10;                            &lt;input&#10;                                type=&quot;range&quot;&#10;                                min=&quot;0&quot;&#10;                                max=&quot;100&quot;&#10;                                value={newProgress}&#10;                                onChange={(e) =&gt; setNewProgress(parseInt(e.target.value))}&#10;                                className=&quot;w-full&quot;&#10;                            /&gt;&#10;                            &lt;div className=&quot;flex justify-between&quot;&gt;&#10;                                &lt;span className=&quot;text-lg font-semibold&quot;&gt;{newProgress}%&lt;/span&gt;&#10;                                &lt;div className=&quot;space-x-2&quot;&gt;&#10;                                    &lt;button&#10;                                        onClick={handleUpdate}&#10;                                        className=&quot;bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition-colors&quot;&#10;                                    &gt;&#10;                                        Save&#10;                                    &lt;/button&gt;&#10;                                    &lt;button&#10;                                        onClick={() =&gt; setEditing(false)}&#10;                                        className=&quot;bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition-colors&quot;&#10;                                    &gt;&#10;                                        Cancel&#10;                                    &lt;/button&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    ) : (&#10;                        &lt;&gt;&#10;                            &lt;div className=&quot;w-full bg-gray-200 rounded-full h-4 mb-2&quot;&gt;&#10;                                &lt;div&#10;                                    className=&quot;progress-bar h-4 rounded-full transition-all duration-500 animate-pulse-orange&quot;&#10;                                    style={{ width: `${progress}%` }}&#10;                                &gt;&lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;text-right&quot;&gt;&#10;                                &lt;span className=&quot;text-2xl font-bold text-sunset-orange&quot;&gt;{progress}%&lt;/span&gt;&#10;                                &lt;span className=&quot;text-gray-600 ml-2&quot;&gt;Complete&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;            );&#10;        };&#10;&#10;        const ActivityFeed = ({ commits }) =&gt; {&#10;            const [expandedCommit, setExpandedCommit] = useState(null);&#10;&#10;            return (&#10;                &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6 hover-lift&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-bold text-gray-800 mb-4 flex items-center&quot;&gt;&#10;                        &lt;i className=&quot;fab fa-github mr-2&quot;&gt;&lt;/i&gt;&#10;                        Recent Commits&#10;                    &lt;/h3&gt;&#10;                    &lt;div className=&quot;space-y-4 max-h-96 overflow-y-auto&quot;&gt;&#10;                        {commits.slice(0, 10).map((commit, index) =&gt; (&#10;                            &lt;div key={commit.sha} className=&quot;border-l-4 border-sunset-orange pl-4 animate-slide-up&quot; style={{animationDelay: `${index * 0.1}s`}}&gt;&#10;                                &lt;div className=&quot;flex justify-between items-start&quot;&gt;&#10;                                    &lt;div className=&quot;flex-1&quot;&gt;&#10;                                        &lt;p className=&quot;font-medium text-gray-800&quot;&gt;&#10;                                            {commit.commit.message.split('\n')[0]}&#10;                                        &lt;/p&gt;&#10;                                        &lt;p className=&quot;text-sm text-gray-600&quot;&gt;&#10;                                            by {commit.commit.author.name} • {new Date(commit.commit.author.date).toLocaleDateString()}&#10;                                        &lt;/p&gt;&#10;                                        {expandedCommit === commit.sha &amp;&amp; commit.commit.message.length &gt; commit.commit.message.split('\n')[0].length &amp;&amp; (&#10;                                            &lt;p className=&quot;text-sm text-gray-700 mt-2 bg-gray-50 p-2 rounded&quot;&gt;&#10;                                                {commit.commit.message.split('\n').slice(1).join('\n') || 'No description'}&#10;                                            &lt;/p&gt;&#10;                                        )}&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;flex space-x-2 ml-4&quot;&gt;&#10;                                        {commit.commit.message.split('\n').length &gt; 1 &amp;&amp; (&#10;                                            &lt;button&#10;                                                onClick={() =&gt; setExpandedCommit(expandedCommit === commit.sha ? null : commit.sha)}&#10;                                                className=&quot;tooltip text-sunset-orange hover:text-sunset-dark transition-colors&quot;&#10;                                                data-tooltip=&quot;Toggle Description&quot;&#10;                                            &gt;&#10;                                                &lt;i className={`fas fa-chevron-${expandedCommit === commit.sha ? 'up' : 'down'}`}&gt;&lt;/i&gt;&#10;                                            &lt;/button&gt;&#10;                                        )}&#10;                                        &lt;a&#10;                                            href={commit.html_url}&#10;                                            target=&quot;_blank&quot;&#10;                                            rel=&quot;noopener noreferrer&quot;&#10;                                            className=&quot;tooltip bg-sunset-orange text-white px-3 py-1 rounded text-sm hover:bg-sunset-dark transition-colors&quot;&#10;                                            data-tooltip=&quot;View on GitHub&quot;&#10;                                        &gt;&#10;                                            View&#10;                                        &lt;/a&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        ))}&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            );&#10;        };&#10;&#10;        // UPDATED: Repository Tree Component (Main folders + Data with CSV only)&#10;        const RepoTree = ({ tree, onFileClick }) =&gt; {&#10;            const getFileIcon = (path, type) =&gt; {&#10;                if (type === 'tree') return '';&#10;                if (path.endsWith('.csv')) return '';&#10;                if (path.endsWith('.py')) return '';&#10;                if (path.endsWith('.md')) return '';&#10;                if (path.endsWith('.json')) return '';&#10;                return '';&#10;            };&#10;&#10;            // Filter and organize tree structure&#10;            const organizeTree = (items) =&gt; {&#10;                const mainFolders = {};&#10;                const dataFiles = [];&#10;&#10;                items.forEach(item =&gt; {&#10;                    const pathParts = item.path.split('/');&#10;                    const topLevel = pathParts[0];&#10;&#10;                    if (topLevel === 'data' &amp;&amp; item.path.endsWith('.csv')) {&#10;                        dataFiles.push(item);&#10;                    } else if (pathParts.length === 1 &amp;&amp; item.type === 'tree') {&#10;                        // Only show main folders&#10;                        mainFolders[topLevel] = item;&#10;                    }&#10;                });&#10;&#10;                return { mainFolders, dataFiles };&#10;            };&#10;&#10;            const { mainFolders, dataFiles } = organizeTree(tree);&#10;&#10;            return (&#10;                &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6 hover-lift&quot;&gt;&#10;                    &lt;h3 className=&quot;text-xl font-bold text-gray-800 mb-4 flex items-center&quot;&gt;&#10;                         Repository Structure&#10;                    &lt;/h3&gt;&#10;&#10;                    &lt;div className=&quot;space-y-2&quot;&gt;&#10;                        {/* Main Folders (Non-interactive) */}&#10;                        {Object.entries(mainFolders).map(([name, item]) =&gt; (&#10;                            &lt;div key={name} className=&quot;flex items-center py-2 px-3 bg-gray-50 rounded animate-slide-up&quot;&gt;&#10;                                &lt;span className=&quot;mr-3 text-lg&quot;&gt;&lt;/span&gt;&#10;                                &lt;span className=&quot;text-gray-700 font-medium&quot;&gt;{name}&lt;/span&gt;&#10;                                {name !== 'data' &amp;&amp; (&#10;                                    &lt;span className=&quot;ml-auto text-xs text-gray-500&quot;&gt;Non-interactive&lt;/span&gt;&#10;                                )}&#10;                            &lt;/div&gt;&#10;                        ))}&#10;&#10;                        {/* Data Folder with CSV Files */}&#10;                        {dataFiles.length &gt; 0 &amp;&amp; (&#10;                            &lt;div className=&quot;mt-4&quot;&gt;&#10;                                &lt;div className=&quot;flex items-center py-2 px-3 bg-sunset-orange bg-opacity-10 rounded-t&quot;&gt;&#10;                                    &lt;span className=&quot;mr-3 text-lg&quot;&gt;�?&lt;/span&gt;&#10;                                    &lt;span className=&quot;text-gray-800 font-semibold&quot;&gt;Data&#10;                                      &lt;span className=&quot;ml-2 text-xs italic text-gray-500&quot;&gt;datasets&lt;/span&gt;&#10;                                    &lt;/span&gt;&#10;                                    &lt;span className=&quot;ml-auto text-xs text-sunset-orange font-medium&quot;&gt;&#10;                                        {dataFiles.length} CSV files&#10;                                    &lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;bg-gray-50 rounded-b p-2 space-y-1&quot;&gt;&#10;                                    {dataFiles.map((file, index) =&gt; (&#10;                                        &lt;div&#10;                                            key={file.path}&#10;                                            className=&quot;flex items-center py-2 px-3 hover:bg-white rounded cursor-pointer transition-colors animate-slide-up&quot;&#10;                                            style={{animationDelay: `${index * 0.1}s`}}&#10;                                            onClick={() =&gt; onFileClick(file.path)}&#10;                                        &gt;&#10;                                            &lt;span className=&quot;mr-3&quot;&gt;&lt;/span&gt;&#10;                                            &lt;span className=&quot;text-gray-700&quot;&gt;{file.path.split('/').pop()}&lt;/span&gt;&#10;                                            &lt;span className=&quot;ml-auto text-xs bg-sunset-orange text-white px-2 py-1 rounded&quot;&gt;&#10;                                                Preview&#10;                                            &lt;/span&gt;&#10;                                        &lt;/div&gt;&#10;                                    ))}&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;&#10;                        {/* Instructions */}&#10;                        &lt;div className=&quot;mt-4 p-3 bg-blue-50 rounded-lg&quot;&gt;&#10;                            &lt;p className=&quot;text-sm text-blue-800&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-info-circle mr-2&quot;&gt;&lt;/i&gt;&#10;                                &lt;strong&gt;Instructions:&lt;/strong&gt; Click on CSV files in the Datasets section to preview data.&#10;                                Other folders are for reference only.&#10;                            &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            );&#10;        };&#10;&#10;        const CSVPreview = ({ csvData, fileName, canExpand }) =&gt; {&#10;            const [expanded, setExpanded] = useState(false);&#10;            const [rows, setRows] = useState([]);&#10;&#10;            useEffect(() =&gt; {&#10;                if (csvData) {&#10;                    const lines = csvData.split('\n').filter(line =&gt; line.trim());&#10;                    const headers = lines[0].split(',');&#10;                    const dataRows = lines.slice(1, expanded ? 51 : 6).map(line =&gt; line.split(','));&#10;                    setRows([headers, ...dataRows]);&#10;                }&#10;            }, [csvData, expanded]);&#10;&#10;            return (&#10;                &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6&quot;&gt;&#10;                    &lt;div className=&quot;flex justify-between items-center mb-4&quot;&gt;&#10;                        &lt;h3 className=&quot;text-xl font-bold text-gray-800 flex items-center&quot;&gt;&#10;                             {fileName}&#10;                        &lt;/h3&gt;&#10;                        {canExpand &amp;&amp; (&#10;                            &lt;button&#10;                                onClick={() =&gt; setExpanded(!expanded)}&#10;                                className=&quot;bg-sunset-orange text-white px-4 py-2 rounded hover:bg-sunset-dark transition-colors&quot;&#10;                            &gt;&#10;                                {expanded ? 'Show Less' : 'Show More (50 rows)'}&#10;                            &lt;/button&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;overflow-x-auto&quot;&gt;&#10;                        &lt;table className=&quot;min-w-full table-auto&quot;&gt;&#10;                            &lt;thead&gt;&#10;                                &lt;tr className=&quot;bg-gray-50&quot;&gt;&#10;                                    {rows[0]?.map((header, index) =&gt; (&#10;                                        &lt;th key={index} className=&quot;px-4 py-2 text-left text-sm font-medium text-gray-700 border-b&quot;&gt;&#10;                                            {header}&#10;                                        &lt;/th&gt;&#10;                                    ))}&#10;                                &lt;/tr&gt;&#10;                            &lt;/thead&gt;&#10;                            &lt;tbody&gt;&#10;                                {rows.slice(1).map((row, index) =&gt; (&#10;                                    &lt;tr key={index} className=&quot;hover:bg-gray-50&quot;&gt;&#10;                                        {row.map((cell, cellIndex) =&gt; (&#10;                                            &lt;td key={cellIndex} className=&quot;px-4 py-2 text-sm text-gray-600 border-b&quot;&gt;&#10;                                                {cell}&#10;                                            &lt;/td&gt;&#10;                                        ))}&#10;                                    &lt;/tr&gt;&#10;                                ))}&#10;                            &lt;/tbody&gt;&#10;                        &lt;/table&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            );&#10;        };&#10;&#10;        // UPDATED: Notes Section (Public display + Admin editing)&#10;        const NotesSection = ({ notes, onAddNote, canEdit, isPublic = false }) =&gt; {&#10;            const [showAddForm, setShowAddForm] = useState(false);&#10;            const [newNote, setNewNote] = useState('');&#10;&#10;            const handleAddNote = async () =&gt; {&#10;                if (newNote.trim()) {&#10;                    await onAddNote({&#10;                        content: newNote,&#10;                        date: new Date().toISOString().split('T')[0]&#10;                    });&#10;                    setNewNote('');&#10;                    setShowAddForm(false);&#10;                }&#10;            };&#10;&#10;            return (&#10;                &lt;div className=&quot;bg-white rounded-lg shadow-lg p-6 hover-lift&quot;&gt;&#10;                    &lt;div className=&quot;flex justify-between items-center mb-4&quot;&gt;&#10;                        &lt;h3 className=&quot;text-xl font-bold text-gray-800 flex items-center&quot;&gt;&#10;                             {isPublic ? 'Latest Updates' : 'Notes &amp; Updates'}&#10;                        &lt;/h3&gt;&#10;                        {canEdit &amp;&amp; !isPublic &amp;&amp; (&#10;                            &lt;button&#10;                                onClick={() =&gt; setShowAddForm(!showAddForm)}&#10;                                className=&quot;tooltip bg-sunset-orange text-white px-4 py-2 rounded hover:bg-sunset-dark transition-colors&quot;&#10;                                data-tooltip=&quot;Add Note&quot;&#10;                            &gt;&#10;                                &lt;i className=&quot;fas fa-plus mr-2&quot;&gt;&lt;/i&gt;&#10;                                Add Note&#10;                            &lt;/button&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;&#10;                    {showAddForm &amp;&amp; !isPublic &amp;&amp; (&#10;                        &lt;div className=&quot;mb-4 p-4 bg-gray-50 rounded-lg animate-slide-up&quot;&gt;&#10;                            &lt;textarea&#10;                                value={newNote}&#10;                                onChange={(e) =&gt; setNewNote(e.target.value)}&#10;                                placeholder=&quot;Enter your note...&quot;&#10;                                className=&quot;w-full p-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-sunset-orange focus:border-transparent&quot;&#10;                                rows=&quot;3&quot;&#10;                            /&gt;&#10;                            &lt;div className=&quot;flex justify-end space-x-2 mt-2&quot;&gt;&#10;                                &lt;button&#10;                                    onClick={handleAddNote}&#10;                                    className=&quot;bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition-colors&quot;&#10;                                &gt;&#10;                                    Save&#10;                                &lt;/button&gt;&#10;                                &lt;button&#10;                                    onClick={() =&gt; setShowAddForm(false)}&#10;                                    className=&quot;bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition-colors&quot;&#10;                                &gt;&#10;                                    Cancel&#10;                                &lt;/button&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    )}&#10;&#10;                    &lt;div className=&quot;space-y-4 max-h-64 overflow-y-auto&quot;&gt;&#10;                        {notes.slice(0, isPublic ? 5 : notes.length).map((note, index) =&gt; (&#10;                            &lt;div key={note.id} className=&quot;border-l-4 border-sunset-orange pl-4 animate-slide-up&quot; style={{animationDelay: `${index * 0.1}s`}}&gt;&#10;                                &lt;p className=&quot;text-gray-800&quot;&gt;{note.content}&lt;/p&gt;&#10;                                &lt;p className=&quot;text-sm text-gray-600 mt-1&quot;&gt;&#10;                                    {new Date(note.date).toLocaleDateString()} • by {note.author}&#10;                                &lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        ))}&#10;                        {notes.length === 0 &amp;&amp; (&#10;                            &lt;div className=&quot;text-center text-gray-500 py-8&quot;&gt;&#10;                                &lt;i className=&quot;fas fa-sticky-note text-4xl mb-2 opacity-50&quot;&gt;&lt;/i&gt;&#10;                                &lt;p&gt;No updates yet&lt;/p&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            );&#10;        };&#10;&#10;        const LoginForm = ({ onLogin }) =&gt; {&#10;            const [username, setUsername] = useState('');&#10;            const [password, setPassword] = useState('');&#10;            const [loading, setLoading] = useState(false);&#10;            const [error, setError] = useState('');&#10;&#10;            const handleLogin = async () =&gt; {&#10;                setLoading(true);&#10;                setError('');&#10;                try {&#10;                    const result = await api.login(username, password);&#10;                    if (result.success) {&#10;                        onLogin(result.user);&#10;                    } else {&#10;                        setError(result.message);&#10;                    }&#10;                } catch (err) {&#10;                    setError('Login failed. Please try again.');&#10;                } finally {&#10;                    setLoading(false);&#10;                }&#10;            };&#10;&#10;            return (&#10;                &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50&quot;&gt;&#10;                    &lt;div className=&quot;bg-white rounded-lg p-8 max-w-md w-full mx-4 animate-slide-up&quot;&gt;&#10;                        &lt;h2 className=&quot;text-2xl font-bold text-gray-800 mb-6 text-center&quot;&gt;&#10;                             Login to Dashboard&#10;                        &lt;/h2&gt;&#10;&#10;                        {error &amp;&amp; (&#10;                            &lt;div className=&quot;bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4&quot;&gt;&#10;                                {error}&#10;                            &lt;/div&gt;&#10;                        )}&#10;&#10;                        &lt;div className=&quot;space-y-4&quot;&gt;&#10;                            &lt;input&#10;                                type=&quot;text&quot;&#10;                                placeholder=&quot;Username&quot;&#10;                                value={username}&#10;                                onChange={(e) =&gt; setUsername(e.target.value)}&#10;                                className=&quot;w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-sunset-orange focus:border-transparent&quot;&#10;                            /&gt;&#10;                            &lt;input&#10;                                type=&quot;password&quot;&#10;                                placeholder=&quot;Password&quot;&#10;                                value={password}&#10;                                onChange={(e) =&gt; setPassword(e.target.value)}&#10;                                className=&quot;w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-sunset-orange focus:border-transparent&quot;&#10;                            /&gt;&#10;                            &lt;button&#10;                                onClick={handleLogin}&#10;                                disabled={loading}&#10;                                className=&quot;w-full bg-sunset-orange text-white py-3 rounded-lg hover:bg-sunset-dark transition-colors disabled:opacity-50&quot;&#10;                            &gt;&#10;                                {loading ? 'Logging in...' : 'Login'}&#10;                            &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        &lt;div className=&quot;mt-4 text-sm text-gray-600 text-center&quot;&gt;&#10;                            &lt;!-- &lt;p&gt;&lt;strong&gt;Demo credentials:&lt;/strong&gt;&lt;/p&gt;&#10;                            &lt;p&gt;Admin: admin/admin123&lt;/p&gt;&#10;                            &lt;p&gt;Supervisor: supervisor/super123&lt;/p&gt;--&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            );&#10;        };&#10;&#10;        // Main App Component&#10;        const App = () =&gt; {&#10;            const [user, setUser] = useState(null);&#10;            const [showLogin, setShowLogin] = useState(false);&#10;            const [progress, setProgress] = useState(0);&#10;            const [commits, setCommits] = useState([]);&#10;            const [repoTree, setRepoTree] = useState([]);&#10;            const [notes, setNotes] = useState([]);&#10;            const [selectedFile, setSelectedFile] = useState(null);&#10;            const [csvData, setCsvData] = useState('');&#10;            const [loading, setLoading] = useState(true);&#10;&#10;            useEffect(() =&gt; {&#10;                loadInitialData();&#10;            }, []);&#10;&#10;            const loadInitialData = async () =&gt; {&#10;                try {&#10;                    const [progressData, commitsData, treeData, notesData] = await Promise.all([&#10;                        api.getProgress(),&#10;                        api.getCommits(),&#10;                        api.getRepoTree(),&#10;                        api.getNotes()&#10;                    ]);&#10;&#10;                    setProgress(progressData.progress);&#10;                    setCommits(commitsData);&#10;                    setRepoTree(treeData.tree || []);&#10;                    setNotes(notesData);&#10;                } catch (error) {&#10;                    console.error('Error loading initial data:', error);&#10;                } finally {&#10;                    setLoading(false);&#10;                }&#10;            };&#10;&#10;            const handleLogin = (userData) =&gt; {&#10;                setUser(userData);&#10;                setShowLogin(false);&#10;            };&#10;&#10;            const handleLogout = () =&gt; {&#10;                setUser(null);&#10;            };&#10;&#10;            const handleProgressUpdate = async (newProgress) =&gt; {&#10;                await api.updateProgress(newProgress);&#10;                setProgress(newProgress);&#10;            };&#10;&#10;            const handleAddNote = async (note) =&gt; {&#10;                const result = await api.addNote(note);&#10;                if (result.success) {&#10;                    setNotes([...notes, { ...note, id: result.id, author: user.username }]);&#10;                }&#10;            };&#10;&#10;            const handleFileClick = async (path) =&gt; {&#10;                if (path.includes('data/') &amp;&amp; path.endsWith('.csv')) {&#10;                    setSelectedFile(path);&#10;                    const content = await api.getFileContent(path);&#10;                    setCsvData(content);&#10;                } else {&#10;                    window.open(`https://github.com/${CONFIG.GITHUB_REPO}/blob/main/${path}`, '_blank');&#10;                }&#10;            };&#10;&#10;            const canEdit = user &amp;&amp; (user.role === 'admin' || user.role === 'editor');&#10;            const isAdmin = user &amp;&amp; user.role === 'admin';&#10;&#10;            if (loading) {&#10;                return (&#10;                    &lt;div className=&quot;min-h-screen flex items-center justify-center&quot;&gt;&#10;                        &lt;LoadingSpinner /&gt;&#10;                    &lt;/div&gt;&#10;                );&#10;            }&#10;&#10;            return (&#10;                &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;                    {/* Header */}&#10;                    &lt;header className=&quot;bg-white shadow-sm border-b-2 border-sunset-orange&quot;&gt;&#10;                        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;                            &lt;div className=&quot;flex justify-between items-center py-4&quot;&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                                    &lt;div className=&quot;text-3xl&quot;&gt;&lt;/div&gt;&#10;                                    &lt;div&gt;&#10;                                        &lt;h1 className=&quot;text-2xl font-bold text-gray-900&quot;&gt;&#10;                                            Geospatial Tagging Thesis&#10;                                        &lt;/h1&gt;&#10;                                        &lt;p className=&quot;text-sm text-gray-600&quot;&gt;&#10;                                            MS-AI Thesis by Faizan Shah Ahmad&#10;                                        &lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                                    {user ? (&#10;                                        &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                                            &lt;span className=&quot;text-sm text-gray-600&quot;&gt;&#10;                                                Welcome, {user.username} ({user.role})&#10;                                            &lt;/span&gt;&#10;                                            &lt;button&#10;                                                onClick={handleLogout}&#10;                                                className=&quot;bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition-colors&quot;&#10;                                            &gt;&#10;                                                Logout&#10;                                            &lt;/button&gt;&#10;                                        &lt;/div&gt;&#10;                                    ) : (&#10;                                        &lt;button&#10;                                            onClick={() =&gt; setShowLogin(true)}&#10;                                            className=&quot;bg-sunset-orange text-white px-4 py-2 rounded hover:bg-sunset-dark transition-colors&quot;&#10;                                        &gt;&#10;                                            Login&#10;                                        &lt;/button&gt;&#10;                                    )}&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/header&gt;&#10;&#10;                    {/* Main Content */}&#10;                    &lt;main className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;                        {/* Robot Greeting */}&#10;                        &lt;RobotGreeting /&gt;&#10;&#10;                        {/* Progress Section */}&#10;                        &lt;div className=&quot;mb-8&quot;&gt;&#10;                            &lt;ProgressBar&#10;                                progress={progress}&#10;                                canEdit={isAdmin}&#10;                                onUpdate={handleProgressUpdate}&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        {/* Activity Chart */}&#10;                        &lt;div className=&quot;mb-8&quot;&gt;&#10;                            &lt;GitHubActivityChart commits={commits} /&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        {/* Main Grid */}&#10;                        &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8&quot;&gt;&#10;                            {/* Activity Feed */}&#10;                            &lt;ActivityFeed commits={commits} /&gt;&#10;&#10;                            {/* Notes Section - Always visible, but editing only for logged in users */}&#10;                            &lt;NotesSection&#10;                                notes={notes}&#10;                                onAddNote={handleAddNote}&#10;                                canEdit={canEdit}&#10;                                isPublic={!user}&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        {/* Repository Tree */}&#10;                        &lt;div className=&quot;mb-8&quot;&gt;&#10;                            &lt;RepoTree tree={repoTree} onFileClick={handleFileClick} /&gt;&#10;                        &lt;/div&gt;&#10;&#10;                        {/* CSV Preview Modal */}&#10;                        {selectedFile &amp;&amp; csvData &amp;&amp; (&#10;                            &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4&quot;&gt;&#10;                                &lt;div className=&quot;bg-white rounded-lg max-w-6xl w-full max-h-[90vh] overflow-hidden&quot;&gt;&#10;                                    &lt;div className=&quot;flex justify-between items-center p-4 border-b&quot;&gt;&#10;                                        &lt;h3 className=&quot;text-lg font-bold&quot;&gt;CSV Preview: {selectedFile}&lt;/h3&gt;&#10;                                        &lt;button&#10;                                            onClick={() =&gt; {&#10;                                                setSelectedFile(null);&#10;                                                setCsvData('');&#10;                                            }}&#10;                                            className=&quot;text-gray-500 hover:text-gray-700&quot;&#10;                                        &gt;&#10;                                            &lt;i className=&quot;fas fa-times text-xl&quot;&gt;&lt;/i&gt;&#10;                                        &lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;p-4 overflow-auto max-h-[80vh]&quot;&gt;&#10;                                        &lt;CSVPreview&#10;                                            csvData={csvData}&#10;                                            fileName={selectedFile.split('/').pop()}&#10;                                            canExpand={canEdit}&#10;                                        /&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;                    &lt;/main&gt;&#10;&#10;                    {/* Footer */}&#10;                    &lt;footer className=&quot;bg-white border-t border-gray-200 mt-16&quot;&gt;&#10;                        &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;                            &lt;div className=&quot;text-center&quot;&gt;&#10;                                &lt;p className=&quot;text-gray-600&quot;&gt;&#10;                                    © 2025 Faizan Shah Ahmad • Air University, Islamabad&#10;                                &lt;/p&gt;&#10;                                &lt;div className=&quot;flex justify-center space-x-4 mt-4&quot;&gt;&#10;                                    &lt;a&#10;                                        href={`https://github.com/${CONFIG.GITHUB_REPO}`}&#10;                                        target=&quot;_blank&quot;&#10;                                        rel=&quot;noopener noreferrer&quot;&#10;                                        className=&quot;text-sunset-orange hover:text-sunset-dark transition-colors&quot;&#10;                                    &gt;&#10;                                        &lt;i className=&quot;fab fa-github text-xl&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/a&gt;&#10;                                    &lt;a&#10;                                        href=&quot;https://github.com/phaze7r/osm-dynamic-api&quot;&#10;                                        target=&quot;_blank&quot;&#10;                                        rel=&quot;noopener noreferrer&quot;&#10;                                        className=&quot;text-sunset-orange hover:text-sunset-dark transition-colors&quot;&#10;                                    &gt;&#10;                                        &lt;i className=&quot;fas fa-server text-xl&quot;&gt;&lt;/i&gt;&#10;                                    &lt;/a&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/footer&gt;&#10;&#10;                    {/* Login Modal */}&#10;                    {showLogin &amp;&amp; &lt;LoginForm onLogin={handleLogin} /&gt;}&#10;                &lt;/div&gt;&#10;            );&#10;        };&#10;&#10;        ReactDOM.render(&lt;App /&gt;, document.getElementById('root'));&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/mobile-style.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/mobile-style.css" />
              <option name="updatedContent" value="@media (max-width: 640px) {&#10;    body {&#10;        background: linear-gradient(135deg, #F28C38 0%, #F5A962 100%);&#10;        color: #222;&#10;        font-family: 'Segoe UI', 'Roboto', Arial, sans-serif;&#10;    }&#10;&#10;    header, footer {&#10;        background: rgba(255,255,255,0.95);&#10;        box-shadow: 0 2px 8px rgba(0,0,0,0.04);&#10;        border-radius: 0 0 16px 16px;&#10;    }&#10;&#10;    .rounded-lg, .rounded, .rounded-full {&#10;        border-radius: 16px !important;&#10;    }&#10;&#10;    .shadow-lg, .shadow, .hover-lift {&#10;        box-shadow: 0 4px 24px rgba(242,140,56,0.12) !important;&#10;    }&#10;&#10;    .bg-white {&#10;        background: rgba(255,255,255,0.98) !important;&#10;    }&#10;&#10;    .text-sunset-orange {&#10;        color: #F28C38 !important;&#10;    }&#10;&#10;    .bg-sunset-orange {&#10;        background: #F28C38 !important;&#10;        color: #fff !important;&#10;    }&#10;&#10;    .bg-sunset-dark {&#10;        background: #E67E22 !important;&#10;        color: #fff !important;&#10;    }&#10;&#10;    .progress-bar {&#10;        background: linear-gradient(90deg, #F28C38 0%, #F5A962 100%) !important;&#10;        box-shadow: 0 2px 8px rgba(242,140,56,0.15);&#10;    }&#10;&#10;    .robot-animation {&#10;        font-size: 3rem !important;&#10;        margin-bottom: 1rem !important;&#10;        animation: bounceGentle 2s infinite;&#10;    }&#10;&#10;    .activity-cell {&#10;        border-radius: 12px !important;&#10;        border: 1px solid #F28C38 !important;&#10;        background: #F5A96222 !important;&#10;    }&#10;&#10;    .tooltip:hover::after {&#10;        font-size: 11px !important;&#10;        padding: 4px 8px !important;&#10;    }&#10;&#10;    .table-auto th, .table-auto td {&#10;        padding: 8px !important;&#10;        font-size: 13px !important;&#10;    }&#10;&#10;    .max-w-7xl, .max-w-6xl, .max-w-md {&#10;        max-width: 98vw !important;&#10;    }&#10;&#10;    .p-6, .p-8, .px-4, .py-8 {&#10;        padding: 1rem !important;&#10;    }&#10;&#10;    .mb-8, .mt-8 {&#10;        margin-bottom: 1.5rem !important;&#10;        margin-top: 1.5rem !important;&#10;    }&#10;&#10;    .text-2xl, .text-xl, .text-lg {&#10;        font-size: 1.2rem !important;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>